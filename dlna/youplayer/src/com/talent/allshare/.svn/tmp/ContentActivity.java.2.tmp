package com.talent.allshare;

import java.util.ArrayList;
import java.util.List;

import org.cybergarage.upnp.Device;
import org.cybergarage.util.CommonLog;
import org.cybergarage.util.LogFactory;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.AnimationDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.talent.allshare.adapter.ContentAdapter;
import com.talent.allshare.adapter.DeviceAdapter;
import com.talent.allshare.bean.PlaylistBean;
import com.talent.allshare.network.Item;
import com.talent.allshare.network.ItemFactory;
import com.talent.allshare.network.UpnpUtil;
import com.talent.allshare.player.DownLoadHelper;
import com.talent.allshare.player.DownLoadHelper.IDownLoadCallback;
import com.talent.allshare.player.FileManager;
import com.talent.allshare.player.MediaManager;
import com.talent.allshare.proxy.AllShareProxy;
import com.talent.allshare.proxy.ContentManager;
import com.talent.allshare.proxy.ControlRequestProxy;
import com.talent.allshare.proxy.ControlRequestProxy.ControlRequestCallback;
import com.talent.allshare.proxy.DeviceBrocastFactory;
import com.talent.allshare.proxy.IDeviceChangeListener;
import com.talent.allshare.softapplication.SoftApplication;
import com.talent.allshare.util.CommonUtil;
import com.youplayer.player.R;
import com.youplayer.player.YouExplorer;

@SuppressLint("ResourceAsColor")
public class ContentActivity extends Activity implements OnItemClickListener,
		IDeviceChangeListener, ControlRequestCallback, OnClickListener {

	private static final CommonLog log = LogFactory.createLog();

	private TextView mTVSelDeV;
	private ListView mContentListView;
	private Button mBtnBack;

	private ContentAdapter mContentAdapter;
	private AllShareProxy mAllShareProxy;
	private ContentManager mContentManager;

	private List<Item> mCurItems, mSafe;
	private DeviceBrocastFactory mBrocastFactory;

	private Handler mHandler;

	private int currentFlag = -1;// video 0 ,music 1 ,photo 2, file 3
	private ImageView videoBtn;//

	private ImageView musicBtn;

	private ImageView photoBtn;

	private ImageView loaclBtn;

	private Button mUpdateBtn;

	private ListView mDevListView;
	private DeviceAdapter mDevAdapter;

	private Button updateBtn;

	private LinearLayout allshareView;

	private LinearLayout contentView;

	private DownLoadHelper mDownLoadHelper;

	private Handler handler;

	private LinearLayout ll_progress;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		handler = new Handler() {
			public void handleMessage(android.os.Message msg) {
				switch (msg.what) {
				case 0x90001:
					Toast.makeText(ContentActivity.this, "下载成功",
							Toast.LENGTH_SHORT).show();
					break;
				case 0x90002:
					Toast.makeText(ContentActivity.this, "下载失败",
							Toast.LENGTH_SHORT).show();
					break;
				default:
					break;
				}

			};
		};

		setContentView(R.layout.content_layout);
		mDownLoadHelper = new DownLoadHelper();
		mDownLoadHelper.init();
		initView();
		initData();
		mAllShareProxy.startSearch();

	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stu =
		currentFlag = -1;
		super.onResume();

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();

	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		if (mContentManager != null)
			mContentManager.clear();
		if (mBrocastFactory != null)
			mBrocastFactory.unRegisterListener();


		if(mAllShareProxy!=null) {
			mAllShareProxy.exitSearch();
		}
		super.onDestroy();
	}

	private void initView() {
		ll_progress = (LinearLayout) findViewById(R.id.ll_progress);
		iv_loading_frame = (ImageView) findViewById(R.id.iv_loading_frame);
		allshareView = (LinearLayout) findViewById(R.id.allshare_ll);
		contentView = (LinearLayout) findViewById(R.id.content_ll);
		allshareView.setVisibility(View.VISIBLE);
		contentView.setVisibility(View.GONE);
		startLoadingFrameAnim(iv_loading_frame);
		ll_progress.setVisibility(View.VISIBLE);
		updateBtn = (Button) findViewById(R.id.device_update);

		mDevListView = (ListView) findViewById(R.id.device_list);
		mDevListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				Device device = (Device) parent.getItemAtPosition(position);
				mAllShareProxy.setSelectedDevice(device);
				allshareView.setVisibility(View.GONE);
				contentView.setVisibility(View.VISIBLE);
				ll_progress.setVisibility(View.GONE);
				initContent();
			}
		});
		TextView emptyView = new TextView(this);
		emptyView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,
				LayoutParams.MATCH_PARENT));
		emptyView.setTextSize(23);
		emptyView.setVisibility(View.GONE);
		// ViewGroup v;
		((ViewGroup) mDevListView.getParent()).addView(emptyView);
		mDevListView.setEmptyView(emptyView);
		mTVSelDeV = (TextView) findViewById(R.id.tv_selDev);
		mContentListView = (ListView) findViewById(R.id.content_list);
		mContentListView.setOnItemClickListener(this);
		mContentListView
				.setOnItemLongClickListener(new OnItemLongClickListener() {

					@Override
					public boolean onItemLongClick(AdapterView<?> parent,
							View arg1, int position, long arg3) {
						Item item = (Item) parent.getItemAtPosition(position);
						showTheDialog(position, item, "");
						if (UpnpUtil.isVideoItem(item)) {
							showTheDialog(position, item, "music");
						}
						return false;
					}

				});
		mBtnBack = (Button) findViewById(R.id.btn_back);
		mBtnBack.setOnClickListener(this);
		mUpdateBtn = (Button) findViewById(R.id.btn_update);
		mUpdateBtn.setOnClickListener(this);

		mProgressDialog = new ProgressDialog(this);
		mProgressDialog.setMessage("Loading...");

		videoBtn = (ImageView) findViewById(R.id.video_btn);
		musicBtn = (ImageView) findViewById(R.id.music_btn);
		photoBtn = (ImageView) findViewById(R.id.photo_btn);
		loaclBtn = (ImageView) findViewById(R.id.loacl_btn);

		videoBtn.setOnClickListener(this);
		musicBtn.setOnClickListener(this);
		photoBtn.setOnClickListener(this);
		loaclBtn.setOnClickListener(this);

		updateBtn.setOnClickListener(this);
	}

	/**
	 * 显示下载对话框
	 * 
	 * @param arg2
	 * @param item
	 */
	Dialog dialog = null;
	int switchFlag = -1;

	private void showTheDialog(int arg2, final Item item, String string) {
		if ("music".equals(string)) {

		} else {

		}
		new AlertDialog.Builder(this)
				.setTitle("请选择：")
				.setIcon(android.R.drawable.ic_dialog_info)
				.setSingleChoiceItems(new String[] { "下载", "添加 到播放列表" }, 0,
						new DialogInterface.OnClickListener() {
							public void onClick(final DialogInterface dialog,
									int which) {
								switchFlag = which;
							}
						})
				.setNegativeButton("确定", new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						switch (which) {
						case 0:
							Toast.makeText(ContentActivity.this, "开始下载",
									Toast.LENGTH_SHORT).show();
							Log.e("gzf", "开始下载");
							String requestUrl = item.getRes();
							Log.e("gzf", "" + requestUrl);
							mDownLoadHelper.syncDownLoadFile(requestUrl,
									FileManager.mkSaveFilePath(requestUrl),
									new IDownLoadCallback() {

										@Override
										public void downLoadResult(
												boolean isSuccess,
												String savePath) {
											//
											Log.e("gzf", "" + isSuccess);
											download(isSuccess);
										}
									});
							break;
						case 1:
							List<PlaylistBean> list = SoftApplication
									.getInstance().getMusicPlaylists();
							list.add(new PlaylistBean("1", "2", "3", item));
							SoftApplication.getInstance().setMusicPlaylists(
									list);

							break;

						default:
							break;
						}
					}
				}).show();

		// AlertDialog.Builder builder = new Builder(ContentActivity.this);
		// builder.setMessage("是否下载该项"+item.getAlbum());
		//
		// builder.setTitle("提示");
		//
		// builder.setPositiveButton("确认", new
		// android.content.DialogInterface.OnClickListener() {
		//
		// @Override
		// public void onClick(final DialogInterface dialog, int which) {
		// Toast.makeText(ContentActivity.this, "开始下载",
		// Toast.LENGTH_SHORT).show();
		// Log.e("gzf", "开始下载");
		// String requestUrl = item.getRes();
		// Log.e("gzf", ""+requestUrl);
		// mDownLoadHelper.syncDownLoadFile(requestUrl,
		// FileManager.mkSaveFilePath(requestUrl), new IDownLoadCallback() {
		//
		// @Override
		// public void downLoadResult(boolean isSuccess, String savePath) {
		// //
		// Log.e("gzf", ""+isSuccess);
		// download(isSuccess );
		// dialog.dismiss();
		// }
		// });
		// }
		// });
		// builder.setNegativeButton("取消", new
		// android.content.DialogInterface.OnClickListener() {
		//
		// @Override
		// public void onClick(DialogInterface dialog, int which) {
		// dialog.dismiss();
		// }
		// });
		//
		// builder.create().show();

		// View view = View.inflate(ContentActivity.this,
		// R.layout.download_dialog, null);
		// TextView tv_download = (TextView)view.findViewById(R.id.tv_download);
		// tv_download.setOnClickListener(new OnClickListener() {
		//
		// @Override
		// public void onClick(View arg0) {
		//
		// }
		// });
		// dialog = new Dialog(this,R.style.dialog);
		// dialog.setContentView(R.layout.download_dialog);
		// dialog.set
		// dialog.show();

		// dialog = new
		// AlertDialog.Builder(this).setView(view)ContentActivity.show();
	}

	public void download(boolean bo) {

		if (bo) {
			// Toast.makeText(ContentActivity.this,"下载成功",
			// Toast.LENGTH_SHORT).show();
			System.err.println("下载成功");
			handler.sendEmptyMessage(0x90001);

		} else {
			// Toast.makeText(ContentActivity.this,"下载失败",
			// Toast.LENGTH_SHORT).show();
			handler.sendEmptyMessage(0x90002);
			System.out.println("下载失败");
		}
	}

	private void initData() {

		mDevAdapter = new DeviceAdapter(this, new ArrayList<Device>());
		mDevListView.setAdapter(mDevAdapter);
		mBrocastFactory = new DeviceBrocastFactory(this);
		mBrocastFactory.registerListener(this);
		mAllShareProxy = AllShareProxy.getInstance(this);
		//

	}

	private void initContent() {

		mContentManager = ContentManager.getInstance();

		mCurItems = new ArrayList<Item>();
		mContentAdapter = new ContentAdapter(this, mCurItems);
		mContentListView.setAdapter(mContentAdapter);

		updateSelDev();// 设置选中名字

		mHandler = new Handler();

		currentFlag = -1;// init currentflag video flag;
		// TODO setVidebuttton fouce
		mHandler.postDelayed(new RequestDirectoryRunnable(), 100);
	}

	private void requestDirectory() {
		Device selDevice = mAllShareProxy.getSelectedDevice();
		if (selDevice == null) {
			CommonUtil.showToask(this, "当前未选中任何设备...");
			// finish();

			return;
		}

		ControlRequestProxy.syncGetDirectory(this, this);
		showProgress(true);
	}

	class RequestDirectoryRunnable implements Runnable {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			requestDirectory();
		}

	}

	private void setContentlist(List<Item> list, int type) {
		mSafe = new ArrayList<Item>();
		mSafe = list;
		mCurItems = list;
		if (list == null) {
			mContentAdapter.clear();
		} else {
			List<Item> newlist = new ArrayList<Item>();
			for (int i = 0; i < list.size(); i++) {
				Item item = list.get(i);
				switch (type) {
				case 0:
					if (UpnpUtil.isVideoItem(item) || UpnpUtil.isNULLItem(item)) {
						newlist.add(item);
					}
					break;
				case 1:
					if (UpnpUtil.isAudioItem(item) || UpnpUtil.isNULLItem(item)) {
						newlist.add(item);
					}
					break;
				case 2:
					if (UpnpUtil.isPictureItem(item)
							|| UpnpUtil.isNULLItem(item)) {
						newlist.add(item);
					}
					break;

				case 3:
					if (UpnpUtil.isFileItem(item) || UpnpUtil.isNULLItem(item)) {
						newlist.add(item);
					}
					break;

				default:
					newlist.add(item);
					break;
				}
			}

			mContentAdapter.refreshData(newlist);
		}
	}

	private ProgressDialog mProgressDialog;

	private void showProgress(boolean bShow) {
		mProgressDialog.dismiss();
		if (bShow) {
			mProgressDialog.show();
		}

	}

	private void goMusicPlayerActivity(int index, Item item) {
		mSafe.add(item);
		MediaManager.getInstance().setMusicList(mSafe);
		Intent intent = new Intent();
		intent.setClass(this, MusicPlayerActivity.class);
		intent.putExtra(MusicPlayerActivity.PLAY_INDEX, index);
		ItemFactory.putItemToIntent(item, intent);
		ContentActivity.this.startActivity(intent);

		// Intent intent = new Intent(this, MusicExplorer.class);
		// intent.setAction("android.intent.action.VIEW");
		// intent.setData(Uri.parse(item.getRes()));
		// ContentActivity.this.startActivity(intent);

	}

	private void goVideoPlayerActivity(int position, Item item) {

		// MediaManager.getInstance().setVideoList(mCurItems);
		//
		// Intent intent = new Intent();
		// intent.setClass(this, VideoPlayerActivity.class);
		// intent.putExtra(VideoPlayerActivity.PLAY_INDEX, position);
		//
		// ItemFactory.putItemToIntent(item, intent);
		// ContentActivity.this.startActivity(intent);
		Intent intent = new Intent(this, YouExplorer.class);
		intent.setAction("android.intent.action.VIEW");
		intent.setData(Uri.parse(item.getRes()));
		ContentActivity.this.startActivity(intent);
	}

	private void goPicturePlayerActivity(int position, Item item) {

		MediaManager.getInstance().setPictureList(mCurItems);

		Intent intent = new Intent();
		intent.setClass(this, PicturePlayerActivity.class);
		intent.putExtra(PicturePlayerActivity.PLAY_INDEX, position);
		ItemFactory.putItemToIntent(item, intent);
		ContentActivity.this.startActivity(intent);
	}

	private void goFilePlayerActivity(int position, Item item) {
		MediaManager.getInstance().setFileList(mCurItems);

		Intent intent = new Intent();
		intent.setClass(this, FileReaderActivity.class);
		intent.putExtra(FileReaderActivity.PLAY_INDEX, position);
		ItemFactory.putItemToIntent(item, intent);
		ContentActivity.this.startActivity(intent);
		// to be done
	}

<<<<<<< .mine
	/**
	 * 开始"..."的帧动画
	 * 
	 * @param imageView
	 */
	private ImageView iv_loading_frame;
	private AnimationDrawable loadingFrameAnimDrawable;

	public void startLoadingFrameAnim(ImageView imageView) {
		imageView.setBackgroundResource(R.anim.frame_animation);
		loadingFrameAnimDrawable = (AnimationDrawable) imageView
				.getBackground();
		imageView.getViewTreeObserver().addOnPreDrawListener(
				new OnPreDrawListener() {
					@Override
					public boolean onPreDraw() {
						loadingFrameAnimDrawable.start();
						return true;
					}
				});
	}

	/**
	 * 停止载入中的帧动画"..."
	 */
	public void stopLoadingFrameAnim() {
		if (loadingFrameAnimDrawable != null) {
			loadingFrameAnimDrawable.stop();
		}
	}

	private void back(boolean b) {
		if (mContentManager != null) {

			mContentManager.popListItem();
			List<Item> list = mContentManager.peekListItem();
			if (list == null) {
				// super.onBackPressed();
				contentView.setVisibility(View.GONE);
				allshareView.setVisibility(View.VISIBLE);
				startLoadingFrameAnim(iv_loading_frame);
				if (b)
					return;
				// mBtnBack.setVisibility(View.INVISIBLE);
				new AlertDialog.Builder(ContentActivity.this)
						.setTitle("确定退出？")
						.setNegativeButton(
								"确定",
								new android.content.DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.dismiss();
										ContentActivity.this.finish();
									}
								})
						.setNeutralButton(
								"取消",
								new android.content.DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.dismiss();
									}
								}).show();
			} else {
				// mBtnBack.setVisibility(View.VISIBLE);
				setContentlist(list, currentFlag);
			}
		} else {
			new AlertDialog.Builder(ContentActivity.this)
					.setTitle("确定退出？")
					.setNegativeButton(
							"确定",
							new android.content.DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.dismiss();
									ContentActivity.this.finish();
								}
							})
					.setNeutralButton(
							"取消",
							new android.content.DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.dismiss();
								}
							}).show();
=======
	private void back() {

		if(mContentManager!=null) {
			mContentManager.popListItem();
			List<Item> list = mContentManager.peekListItem();
			if (list == null) {
	//			super.onBackPressed();
				contentView.setVisibility(View.GONE);
				allshareView.setVisibility(View.VISIBLE);
	//			mBtnBack.setVisibility(View.INVISIBLE);
				
			} else {
	//			mBtnBack.setVisibility(View.VISIBLE);
				setContentlist(list,currentFlag);
			}
>>>>>>> .r52
		}
	}

	@Override
	public void onBackPressed() {
		back(false);

	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {

		Item item = (Item) parent.getItemAtPosition(position);
		log.e("item = \n" + item.getShowString());

		if (UpnpUtil.isAudioItem(item)) {
			goMusicPlayerActivity(position, item);
		} else if (UpnpUtil.isVideoItem(item)) {
			goVideoPlayerActivity(position, item);
		} else if (UpnpUtil.isPictureItem(item)) {
			goPicturePlayerActivity(position, item);
		} else if (UpnpUtil.isFileItem(item)) {
			goFilePlayerActivity(position, item);
		} else {
			ControlRequestProxy.syncGetItems(ContentActivity.this,
					item.getStringid(), ContentActivity.this);
			showProgress(true);
		}

	}

	private void updateDeviceList() {
		List<Device> list = mAllShareProxy.getDeviceList();
		mDevAdapter.refreshData(list);
	}

	@Override
	public void onDeviceChange(boolean isSelDeviceChange) {
		// TODO Auto-generated method stub
		contentView.setVisibility(View.GONE);
		allshareView.setVisibility(View.VISIBLE);
		startLoadingFrameAnim(iv_loading_frame);
		ll_progress.setVisibility(View.GONE);
		updateDeviceList();

		if (isSelDeviceChange) {
			CommonUtil.showToask(this, "当前设备已卸载...");
			ll_progress.setVisibility(View.VISIBLE);
			// finish();
		}
	}

	@Override
	public void onGetItems(final List<Item> list) {
		ll_progress.setVisibility(View.GONE);
		runOnUiThread(new Runnable() {

			@Override
			public void run() {
				showProgress(false);
				if (list == null) {
					CommonUtil.showToask(ContentActivity.this, "无法获取目录...");
					return;
				}
				mContentManager.pushListItem(list);
				setContentlist(list, currentFlag);

			}
		});
	}

	private void updateSelDev() {
		setSelDevUI(mAllShareProxy.getSelectedDevice());
	}

	private void setSelDevUI(Device device) {
		if (device == null) {
			mTVSelDeV.setText("no select device");
		} else {
			mTVSelDeV.setText(device.getFriendlyName());
		}

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.video_btn:
			if (currentFlag == 0) {
				currentFlag = -1;
			} else {
				selectBtn(0);
			}
			// videoBtn.setBackgroundColor(R.color.yellow);
			List<Item> list = mContentManager.peekListItem();
			setContentlist(list, currentFlag);
			break;
		case R.id.music_btn:
			if (currentFlag == 1) {
				currentFlag = -1;
			} else {
				selectBtn(1);
			}
			list = mContentManager.peekListItem();
			setContentlist(list, currentFlag);
			break;
		case R.id.photo_btn:
			if (currentFlag == 2) {
				currentFlag = -1;
			} else {
				selectBtn(2);
			}
			list = mContentManager.peekListItem();
			setContentlist(list, currentFlag);
			break;
		case R.id.loacl_btn:
			if (currentFlag == 3) {
				currentFlag = -1;
			} else {
				selectBtn(3);
			}
			list = mContentManager.peekListItem();
			setContentlist(list, currentFlag);
			break;
		case R.id.btn_back:
			back(true);
			break;
		case R.id.device_update:
			// TODO刷新界面
			mAllShareProxy.resetSearch();
			mAllShareProxy.startSearch();
			break;

		}

	}

	private void selectBtn(int i) {
		currentFlag = i;
		switch (i) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		default:
			break;
		}
	}
}
